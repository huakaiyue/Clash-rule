pa: &pa {type: http, interval: 33333, health-check: {enable: true, url: "https://www.gstatic.com/generate_204", interval: 333}}
# 机场订阅
proxy-providers:
  p1:
    url: "https"
    <<: *pa
    proxy: 直连
  p2:
    url: "https"
    <<: *pa
    proxy: 直连

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 666
keep-alive-interval: 33
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 127.0.0.1:9090
secret: ""
external-ui: "ui"
#external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
#  force-domain:
#    - "+."
  skip-domain:
    - "+.baidu.com"

# 入站
tun:
  enable: true
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
#   - "*"
    - "+.lan"
    - "+.local"
    - "rule-set:cn_domain"
  nameserver:
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  proxy-server-nameserver:
    - https://dns.alidns.com/dns-query
    - https://doh.pub/dns-query
#  nameserver-policy:
#    "rule-set:cn_domain": system

# 出站策略
pp: &pp {type: select, proxies: [香港, 日本, 美国, 台湾, 韩国, 新加坡, 直连], include-all: true, filter: "(?i)^(?!.*(?:香港|HK|日本|JP|美国|US|台湾|TW|韩国|KR|新加坡|SG|直连|流量|到期|重置|扣费|客服)).*"}
pr: &pr {type: select, proxies: [Proxy, 香港, 日本, 美国, 台湾, 韩国, 新加坡, 直连], include-all: true, filter: "(?i)^(?!.*(?:香港|HK|日本|JP|美国|US|台湾|TW|韩国|KR|新加坡|SG|直连|流量|到期|重置|扣费|客服)).*"}
url-test: &url-test {type: url-test, url: "https://www.gstatic.com/generate_204", interval: 333, tolerance: 33, max-failed-times: 3, include-all: true, exclude-filter: "(?i)X[2-9]"}

proxies:
  - {name: 直连, type: direct, udp: true}
proxy-groups:
  - {name: Proxy, <<: *pp}
  - {name: Telegram, <<: *pr}
  - {name: YouTube, <<: *pr}
  - {name: TikTok, <<: *pr}
  - {name: Twitter, <<: *pr}
  - {name: OpenAI, <<: *pr}
  - {name: Google, <<: *pr}
  
  - {name: 香港, <<: *url-test, filter: "(?i)(香港|HK)"}
  - {name: 日本, <<: *url-test, filter: "(?i)(日本|JP)"}
  - {name: 台湾, <<: *url-test, filter: "(?i)(台湾|TW)"}
  - {name: 美国, <<: *url-test, filter: "(?i)(美国|US)"}
  - {name: 韩国, <<: *url-test, filter: "(?i)(韩国|KR)"}
  - {name: 新加坡, <<: *url-test, filter: "(?i)(新加坡|SG)"}
  
# 规则匹配
rules:
  - RULE-SET,private_domain,直连
  - RULE-SET,telegram_domain,Telegram
  - RULE-SET,telegram_ip,Telegram,no-resolve
  - RULE-SET,youtube_domain,YouTube
  - RULE-SET,tiktok_domain,TikTok
  - RULE-SET,twitter_domain,Twitter
  - RULE-SET,openai_domain,OpenAI
  - RULE-SET,github_domain,香港
  - RULE-SET,google_domain,Google
  - RULE-SET,google_ip,Google,no-resolve
  - RULE-SET,geolocation-!cn,Proxy
  - RULE-SET,cn_domain,直连
  - RULE-SET,cn_ip,直连
  - MATCH,Proxy
  
# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
 
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  twitter_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.mrs"}
  openai_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/openai.mrs" }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}

  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
        
